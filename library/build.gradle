import groovy.io.FileType
import groovy.text.SimpleTemplateEngine

import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'java-library'
apply plugin: 'maven-publish'

apply plugin: 'net.ltgt.errorprone'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'pmd'

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'de.fuerstenau.buildconfig'
apply plugin: 'io.freefair.javadoc-links'

apply plugin: 'idea'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    errorprone deps.errorprone

    compileOnly deps.lombok
    compileOnly deps.jsr305
    compileOnly deps.javaxExtras

    api deps.retrofit
    api deps.retrofitMoshi
    api deps.okHttp
    api deps.moshi

    testCompileOnly deps.lombok
    testCompileOnly deps.jsr305

    testImplementation deps.junit
    testImplementation deps.assertj
    testImplementation deps.mockwebserver
    testImplementation deps.privateConstructor
}

task generatePackageInfo {
    File generatedPackageInfoDir = file("$buildDir/generated")

    sourceSets.main.java.srcDirs -= generatedPackageInfoDir
    sourceSets.main.java.srcDirs.each { inputs.dir(it.absolutePath) }
    outputs.dir(generatedPackageInfoDir)

    sourceSets.main.java.srcDirs += generatedPackageInfoDir

    doLast {
        Pattern packagePattern = Pattern.compile('package (.*?);', Pattern.DOTALL)
        String templateText = new File(projectDir, 'package-info.template').text
        Set<String> packages = []

        generatedPackageInfoDir.deleteDir()
        generatedPackageInfoDir.mkdirs()

        sourceSets.main.java.srcDirs.each {
            it.eachFileRecurse(FileType.FILES) {
                if (it.name.endsWith('.java')) {
                    List<String> fileLines = it.readLines()

                    if (!fileLines.isEmpty()) {
                        Matcher matcher = packagePattern.matcher(fileLines.first())

                        if (matcher.matches()) {
                            packages += matcher.group(1)
                        }
                    }
                }
            }
        }

        packages.each {
            File outputDirectory = mkdir(new File(generatedPackageInfoDir, it.replaceAll('\\.', '/')))
            File outputFile = new File(outputDirectory.absolutePath, 'package-info.java')

            String templateOutput = new SimpleTemplateEngine()
                    .createTemplate(templateText)
                    .make(['packageName': it])
                    .toString()

            outputFile << templateOutput
        }
    }
}

task delombok(type: JavaExec, dependsOn: compileJava) {
    String buildConfigInputDir = "$buildDir/gen/buildconfig/src/main"

    ext.outputDir = 'build/delombok'
    outputs.dir(outputDir)
    inputs.dir(buildConfigInputDir)

    args += "delombok"

    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)

        args += it
    }

    args += buildConfigInputDir
    args += "--target=$outputDir"
    args += "--classpath=$configurations.compileClasspath.asPath"

    classpath configurations.compileOnly.asPath
    main = "lombok.launch.Main"
}

task sourceJar(type: Jar, dependsOn: delombok) {
    from delombok.outputDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

compileJava {
    options.compilerArgs << "-Werror" << "-Xep:ParameterName:OFF"
}

buildConfig {
    packageName = 'me.proxer.library'
}

javadoc {
    dependsOn delombok
    failOnError false

    source = delombok.outputDir

    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addBooleanOption('Xdoclint:-missing', true)
}

jacoco {
    setToolVersion(jacocoVersion)
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

checkstyle {
    setToolVersion(checkstyleVersion)
}

findbugs {
    excludeFilter = file('config/findbugs/findbugs-filter.xml')
    sourceSets = [sourceSets.main]

    setToolVersion(findbugsVersion)
}

pmd {
    setToolVersion(pmdVersion)
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'ProxerLibJava'

            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = DELEGATE_FIRST

                    name 'ProxerLibJava'
                    description 'An Java and Android library, implementing the API of the Proxer.me website'
                    url 'https://github.com/proxer/ProxerLibJava'

                    scm {
                        url 'https://github.com/proxer/ProxerLibJava'
                        connection 'scm:git:https://github.com/proxer/ProxerLibJava'
                        developerConnection 'scm:git:git@github.com/proxer/ProxerLibJava'
                        tag 'HEAD'
                    }

                    issueManagement {
                        system 'GitHub Issues'
                        url 'https://github.com/proxer/ProxerLibJava/issues'
                    }

                    licenses {
                        license {
                            name 'MIT'
                            url 'https://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }
                }
            }
        }
    }
}

test { finalizedBy jacocoTestReport }

gradle.projectsEvaluated {
    compileJava.dependsOn(generatePackageInfo)
}
