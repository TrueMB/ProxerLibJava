plugins {
    id 'org.jetbrains.kotlin.jvm'
    id "org.jetbrains.kotlin.kapt"
    id "org.jetbrains.dokka"

    id "java-library"
    id "maven-publish"

    id "jacoco"
    id "io.gitlab.arturbosch.detekt"
    id "org.jlleitschuh.gradle.ktlint"

    id "com.github.gmazzo.buildconfig"
}

apply from: "${rootDir}/gradle/dependencies.gradle"

tasks.withType(org.jetbrains.dokka.gradle.DokkaTask).configureEach {
    dokkaSourceSets {
        configureEach {
            sourceLink {
                localDirectory.set(file("src/main/kotlin"))
                remoteUrl.set(uri("https://github.com/proxer/ProxerLibJava/tree/master/library/src/main/kotlin").toURL())
            }

            externalDocumentationLink { url.set(new URL("https://square.github.io/retrofit/2.x/retrofit/")) }
            externalDocumentationLink { url.set(new URL("https://square.github.io/okhttp/3.x/okhttp/")) }
            externalDocumentationLink { url.set(new URL("https://square.github.io/moshi/1.x/moshi/")) }
        }
    }
}

tasks.dokkaJavadoc.configure {
    outputDirectory.set(javadoc.destinationDir)
}

task sourceJar(type: Jar) {
    archiveClassifier = "sources"

    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier = "javadoc"

    from javadoc.destinationDir
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "17"
        allWarningsAsErrors = true
        freeCompilerArgs = ["-Xjsr305=strict", "-progressive"]
    }
}

kapt {
    useBuildCache = true
}

test {
    finalizedBy jacocoTestReport

    useJUnitPlatform()
}

buildConfig {
    packageName("me.proxer.library")  // forces the package. Defaults to '${project.group}'

    useKotlinOutput()   // adds `internal` modifier to all declarations
    buildConfigField("String", "packageName", "\"me.proxer.library\"")
    buildConfigField("String", "version", provider { "\"${project.version}\"" })
}

jacoco {
    setToolVersion(jacocoVersion)
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = false
    }
}

ktlint {
    disabledRules = ["import-ordering"]
    version = ktlintVersion

    reporters {
        reporter "checkstyle"
    }
}

detekt {
    version = detektVersion
    buildUponDefaultConfig = true

    config = files("$rootDir/config/detekt.yml")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "ProxerLibJava"

            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = "ProxerLibJava"
                description = "A JVM and Android library, implementing the API of the Proxer.Me website"
                url = "https://github.com/proxer/ProxerLibJava"

                scm {
                    url = "https://github.com/proxer/ProxerLibJava"
                    connection = "scm:git:https://github.com/proxer/ProxerLibJava"
                    developerConnection = "scm:git:git@github.com/proxer/ProxerLibJava"
                    tag = "HEAD"
                }

                issueManagement {
                    system = "GitHub Issues"
                    url = "https://github.com/proxer/ProxerLibJava/issues"
                }

                licenses {
                    license {
                        name = "MIT"
                        url = "https://opensource.org/licenses/MIT"
                        distribution = "repo"
                    }
                }
            }
        }
    }
}
